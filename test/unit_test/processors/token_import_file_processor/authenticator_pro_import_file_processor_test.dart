import 'dart:convert';
import 'dart:typed_data';

import 'package:file_selector/file_selector.dart';
import 'package:flutter_test/flutter_test.dart';
import 'package:privacyidea_authenticator/model/enums/algorithms.dart';
import 'package:privacyidea_authenticator/model/enums/token_origin_source_type.dart';
import 'package:privacyidea_authenticator/model/enums/token_types.dart';
import 'package:privacyidea_authenticator/model/processor_result.dart';
import 'package:privacyidea_authenticator/model/tokens/hotp_token.dart';
import 'package:privacyidea_authenticator/model/tokens/token.dart';
import 'package:privacyidea_authenticator/model/tokens/totp_token.dart';
import 'package:privacyidea_authenticator/processors/token_import_file_processor/authenticator_pro_import_file_processor.dart';
import 'package:privacyidea_authenticator/utils/token_import_origins.dart';

void main() {
  _testAuthenticatorProImportFileProcessor();
}

void _assertSuccessResults(List<ProcessorResult<Token>> results) {
  expect(results.length, equals(2));
  final result0 = results[0];
  expect(result0, isA<ProcessorResultSuccess>());
  final token0 = result0.asSuccess!.resultData;
  expect(token0.label, 'Test1');
  expect(token0.issuer, 'Test1');
  expect(token0.type, TokenTypes.TOTP.name);
  expect(token0, isA<TOTPToken>());
  expect(token0.origin, isNotNull);
  expect(token0.origin!.appName, TokenImportOrigins.authenticatorPro.appName);
  expect(token0.origin!.source, TokenOriginSourceType.backupFile);
  final totpToken = token0 as TOTPToken;
  expect(totpToken.secret, 'AAAAAAAA');
  expect(totpToken.algorithm, Algorithms.SHA1);
  expect(totpToken.digits, 6);
  expect(totpToken.period, 30);
  final result1 = results[1];
  expect(result1, isA<ProcessorResultSuccess>());
  final token1 = result1.asSuccess!.resultData;
  expect(token1.label, 'Test2');
  expect(token1.issuer, 'Test2');
  expect(token1.type, TokenTypes.HOTP.name);
  expect(token1, isA<HOTPToken>());
  expect(token1.origin, isNotNull);
  expect(token1.origin!.appName, TokenImportOrigins.authenticatorPro.appName);
  expect(token1.origin!.source, TokenOriginSourceType.backupFile);
  final hotpToken = token1 as HOTPToken;
  expect(hotpToken.secret, 'BBBBBBBB');
  expect(hotpToken.algorithm, Algorithms.SHA1);
  expect(hotpToken.digits, 6);
  expect(hotpToken.counter, 0);
}

void _testAuthenticatorProImportFileProcessor() {
  group('Authenticator ProImport File Processor Test', () {
    const processor = AuthenticatorProImportFileProcessor();
    group('json', () {
      group('encryped', () {});
      group('plain', () {
        // Arrange
        const byteDataString =
            '[123, 34, 65, 117, 116, 104, 101, 110, 116, 105, 99, 97, 116, 111, 114, 115, 34, 58, 91, 123, 34, 84, 121, 112, 101, 34, 58, 50, 44, 34, 73, 99, 111, 110, 34, 58, 110, 117, 108, 108, 44, 34, 73, 115, 115, 117, 101, 114, 34, 58, 34, 84, 101, 115, 116, 49, 34, 44, 34, 85, 115, 101, 114, 110, 97, 109, 101, 34, 58, 34, 84, 101, 115, 116, 49, 34, 44, 34, 83, 101, 99, 114, 101, 116, 34, 58, 34, 65, 65, 65, 65, 65, 65, 65, 65, 34, 44, 34, 80, 105,'
            '110, 34, 58, 110, 117, 108, 108, 44, 34, 65, 108, 103, 111, 114, 105, 116, 104, 109, 34, 58, 48, 44, 34, 68, 105, 103, 105, 116, 115, 34, 58, 54, 44, 34, 80, 101, 114, 105, 111, 100, 34, 58, 51, 48, 44, 34, 67, 111, 117, 110, 116, 101, 114, 34, 58, 48, 44, 34, 67, 111, 112, 121, 67, 111, 117, 110, 116, 34, 58, 48, 44, 34, 82, 97, 110, 107, 105, 110, 103, 34, 58, 48, 125, 44, 123, 34, 84, 121, 112, 101, 34, 58, 49, 44, 34, 73, 99, 111, 110, 34,'
            '58, 110, 117, 108, 108, 44, 34, 73, 115, 115, 117, 101, 114, 34, 58, 34, 84, 101, 115, 116, 50, 34, 44, 34, 85, 115, 101, 114, 110, 97, 109, 101, 34, 58, 34, 84, 101, 115, 116, 50, 34, 44, 34, 83, 101, 99, 114, 101, 116, 34, 58, 34, 66, 66, 66, 66, 66, 66, 66, 66, 34, 44, 34, 80, 105, 110, 34, 58, 110, 117, 108, 108, 44, 34, 65, 108, 103, 111, 114, 105, 116, 104, 109, 34, 58, 48, 44, 34, 68, 105, 103, 105, 116, 115, 34, 58, 54, 44, 34, 80,'
            '101, 114, 105, 111, 100, 34, 58, 51, 48, 44, 34, 67, 111, 117, 110, 116, 101, 114, 34, 58, 48, 44, 34, 67, 111, 112, 121, 67, 111, 117, 110, 116, 34, 58, 48, 44, 34, 82, 97, 110, 107, 105, 110, 103, 34, 58, 48, 125, 93, 44, 34, 67, 97, 116, 101, 103, 111, 114, 105, 101, 115, 34, 58, 91, 93, 44, 34, 65, 117, 116, 104, 101, 110, 116, 105, 99, 97, 116, 111, 114, 67, 97, 116, 101, 103, 111, 114, 105, 101, 115, 34, 58, 91, 93, 44, 34, 67, 117, 115, 116,'
            '111, 109, 73, 99, 111, 110, 115, 34, 58, 91, 93, 125]';
        final byteData = Uint8List.fromList((jsonDecode(byteDataString) as List).cast<int>());
        final XFile file = XFile.fromData(byteData, name: 'auth_pro_plain.json');
        group('fileIsValid', () {
          test('isTrue', () async {
            // Act
            final result = await processor.fileIsValid(file);
            // Assert
            expect(result, isTrue);
          });
          test('isFalse', () async {
            // Arrange
            final byteData = Uint8List.fromList((jsonDecode(byteDataString) as List).cast<int>()..removeLast());
            final XFile file = XFile.fromData(byteData, name: 'auth_pro_plain_invalid.json');

            // Act
            final result = await processor.fileIsValid(file);
            // Assert
            expect(result, isFalse);
          });
        });

        test('fileNeedsPassword', () async {
          // Act
          final result = await processor.fileNeedsPassword(file);
          // Assert
          expect(result, isFalse);
        });
        test('processFile', () async {
          // Act
          final results = await processor.processFile(file);
          // Assert
          _assertSuccessResults(results);
        });
      });
    });
    group('html plain', () {
      // Arrange
      const htmlFileByteString =
          '[60, 33, 100, 111, 99, 116, 121, 112, 101, 32, 104, 116, 109, 108, 62, 10, 60, 104, 116, 109, 108, 62, 10, 32, 32, 32, 32, 60, 104, 101, 97, 100, 62, 10, 32, 32, 32, 32, 32, 32, 32, 32, 60, 109, 101, 116, 97, 32, 99, 104, 97, 114, 115, 101, 116, 61, 34, 117, 116, 102, 45, 56, 34, 62, 10, 32, 32, 32, 32, 32, 32, 32, 32, 60, 116, 105, 116, 108, 101, 62, 65, 117, 116, 104, 101, 110, 116, 105, 99, 97, 116, 111, 114, 32, 80, 114, 111, 32, 66, 97,'
          '99, 107, 117, 112, 60, 47, 116, 105, 116, 108, 101, 62, 10, 32, 32, 32, 32, 32, 32, 32, 32, 60, 115, 116, 121, 108, 101, 62, 10, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 98, 111, 100, 121, 32, 123, 10, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 102, 111, 110, 116, 45, 102, 97, 109, 105, 108, 121, 58, 32, 115, 97, 110, 115, 45, 115, 101, 114, 105, 102, 59, 10, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32,'
          '32, 125, 10, 32, 32, 32, 32, 32, 32, 32, 32, 10, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 116, 97, 98, 108, 101, 32, 123, 10, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 119, 105, 100, 116, 104, 58, 32, 49, 48, 48, 37, 59, 10, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 98, 111, 114, 100, 101, 114, 45, 99, 111, 108, 108, 97, 112, 115, 101, 58, 32, 99, 111, 108, 108, 97, 112,'
          '115, 101, 59, 10, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 125, 10, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 10, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 116, 97, 98, 108, 101, 32, 116, 104, 32, 123, 10, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 116, 101, 120, 116, 45, 97, 108, 105, 103, 110, 58, 32, 108, 101, 102, 116, 59, 10, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32,'
          '125, 10, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 10, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 116, 97, 98, 108, 101, 32, 116, 114, 58, 110, 111, 116, 40, 58, 108, 97, 115, 116, 45, 111, 102, 45, 116, 121, 112, 101, 41, 32, 123, 10, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 98, 111, 114, 100, 101, 114, 45, 98, 111, 116, 116, 111, 109, 58, 32, 115, 111, 108, 105, 100, 32, 49, 112, 120, 32, 35, 101,'
          '101, 101, 59, 10, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 125, 10, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 10, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 116, 97, 98, 108, 101, 32, 116, 114, 58, 102, 105, 114, 115, 116, 45, 111, 102, 45, 116, 121, 112, 101, 32, 123, 10, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 98, 111, 114, 100, 101, 114, 45, 99, 111, 108, 111, 114, 58, 32, 35, 48,'
          '48, 48, 59, 10, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 125, 10, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 10, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 116, 97, 98, 108, 101, 32, 116, 104, 44, 32, 116, 97, 98, 108, 101, 32, 116, 100, 32, 123, 10, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 112, 97, 100, 100, 105, 110, 103, 58, 32, 56, 112, 120, 59, 10, 32, 32, 32, 32, 32, 32,'
          '32, 32, 32, 32, 32, 32, 125, 10, 32, 32, 32, 32, 32, 32, 32, 32, 60, 47, 115, 116, 121, 108, 101, 62, 10, 32, 32, 32, 32, 60, 47, 104, 101, 97, 100, 62, 10, 32, 32, 32, 32, 60, 98, 111, 100, 121, 62, 10, 32, 32, 32, 32, 32, 32, 32, 32, 10, 32, 32, 32, 32, 32, 32, 32, 32, 60, 116, 97, 98, 108, 101, 62, 10, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 60, 116, 114, 62, 10, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32,'
          '32, 32, 32, 32, 32, 32, 60, 116, 104, 62, 73, 115, 115, 117, 101, 114, 60, 47, 116, 104, 62, 10, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 60, 116, 104, 62, 85, 115, 101, 114, 110, 97, 109, 101, 60, 47, 116, 104, 62, 10, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 60, 116, 104, 62, 79, 84, 80, 32, 65, 117, 116, 104, 32, 85, 82, 73, 60, 47, 116, 104, 62, 10, 32, 32, 32, 32, 32, 32,'
          '32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 60, 116, 104, 62, 81, 82, 32, 67, 111, 100, 101, 60, 47, 116, 104, 62, 10, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 60, 47, 116, 114, 62, 10, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 10, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 60, 116, 114, 62, 10, 32, 32, 32, 32, 60, 116, 100, 62, 84, 101, 115, 116, 49, 60, 47, 116, 100, 62, 10, 32, 32, 32, 32, 60, 116,'
          '100, 62, 84, 101, 115, 116, 49, 60, 47, 116, 100, 62, 10, 32, 32, 32, 32, 60, 116, 100, 62, 60, 99, 111, 100, 101, 62, 111, 116, 112, 97, 117, 116, 104, 58, 47, 47, 116, 111, 116, 112, 47, 84, 101, 115, 116, 49, 37, 51, 65, 84, 101, 115, 116, 49, 63, 115, 101, 99, 114, 101, 116, 61, 65, 65, 65, 65, 65, 65, 65, 65, 38, 105, 115, 115, 117, 101, 114, 61, 84, 101, 115, 116, 49, 60, 47, 99, 111, 100, 101, 62, 60, 47, 116, 100, 62, 10, 32, 32, 32,'
          '32, 60, 116, 100, 62, 60, 105, 109, 103, 32, 115, 114, 99, 61, 34, 100, 97, 116, 97, 58, 105, 109, 97, 103, 101, 47, 112, 110, 103, 59, 98, 97, 115, 101, 54, 52, 44, 105, 86, 66, 79, 82, 119, 48, 75, 71, 103, 111, 65, 65, 65, 65, 78, 83, 85, 104, 69, 85, 103, 65, 65, 65, 76, 81, 65, 65, 65, 67, 48, 65, 81, 65, 65, 65, 65, 65, 86, 116, 106, 117, 102, 65, 65, 65, 66, 99, 107, 108, 69, 81, 86, 82, 52, 110, 79, 50, 88, 85, 90, 76,'
          '67, 77, 65, 120, 68, 100, 81, 80, 102, 47, 53, 97, 54, 103, 98, 72, 107, 108, 116, 73, 100, 47, 108, 98, 119, 82, 101, 105, 85, 53, 115, 70, 77, 107, 79, 48, 111, 66, 118, 49, 50, 69, 68, 47, 43, 76, 81, 54, 103, 109, 113, 88, 82, 120, 100, 112, 112, 107, 78, 100, 99, 71, 68, 65, 118, 43, 77, 77, 79, 56, 53, 107, 78, 66, 54, 105, 53, 110, 118, 78, 99, 54, 111, 112, 100, 57, 83, 70, 79, 72, 69, 47, 111, 80, 74, 43, 76, 67, 116, 114,'
          '107, 71, 51, 47, 105, 109, 101, 66, 75, 57, 77, 117, 52, 49, 85, 79, 67, 98, 54, 70, 121, 118, 116, 68, 85, 106, 55, 106, 86, 99, 52, 68, 84, 67, 87, 100, 118, 48, 105, 85, 117, 121, 52, 87, 116, 82, 113, 86, 70, 104, 84, 68, 76, 116, 101, 88, 109, 112, 113, 113, 97, 108, 86, 48, 65, 85, 81, 55, 72, 114, 67, 89, 47, 85, 107, 102, 74, 105, 47, 74, 90, 97, 108, 89, 99, 114, 70, 88, 88, 81, 75, 74, 99, 43, 90, 89, 100, 114, 98, 82,'
          '83, 87, 85, 85, 53, 54, 88, 116, 98, 50, 77, 122, 65, 77, 66, 56, 49, 74, 114, 85, 98, 114, 56, 79, 56, 108, 87, 52, 118, 51, 54, 113, 116, 48, 86, 104, 104, 118, 115, 98, 82, 76, 105, 111, 53, 101, 74, 104, 106, 99, 52, 69, 49, 119, 77, 79, 47, 99, 49, 121, 110, 50, 99, 122, 109, 114, 116, 66, 86, 110, 47, 115, 105, 120, 88, 87, 86, 107, 54, 79, 113, 57, 83, 54, 80, 99, 114, 49, 82, 53, 48, 70, 98, 72, 90, 57, 43, 109, 79, 74,'
          '110, 118, 118, 115, 111, 114, 84, 66, 110, 55, 82, 80, 87, 110, 112, 53, 49, 108, 101, 76, 108, 90, 111, 87, 55, 74, 89, 67, 114, 98, 119, 108, 120, 90, 49, 55, 74, 116, 48, 85, 112, 101, 70, 108, 117, 73, 87, 52, 115, 102, 71, 122, 50, 53, 83, 99, 90, 98, 104, 43, 49, 110, 56, 75, 78, 88, 89, 102, 53, 72, 118, 120, 87, 66, 80, 105, 65, 113, 121, 120, 88, 53, 71, 66, 84, 57, 90, 53, 79, 99, 120, 47, 74, 48, 113, 79, 65, 79, 88, 74,'
          '90, 55, 114, 53, 88, 75, 53, 118, 87, 108, 90, 99, 85, 120, 49, 98, 86, 108, 113, 52, 69, 53, 114, 107, 83, 119, 106, 51, 53, 49, 102, 57, 43, 103, 72, 80, 47, 72, 77, 106, 57, 48, 116, 120, 120, 107, 54, 122, 116, 117, 99, 53, 122, 80, 56, 88, 88, 75, 75, 122, 75, 80, 85, 122, 102, 47, 107, 47, 57, 110, 55, 56, 98, 80, 47, 52, 108, 47, 103, 65, 80, 48, 119, 89, 80, 99, 50, 108, 73, 67, 103, 65, 65, 65, 65, 66, 74, 82, 85, 53,'
          '69, 114, 107, 74, 103, 103, 103, 61, 61, 34, 62, 60, 47, 116, 100, 62, 10, 60, 47, 116, 114, 62, 60, 116, 114, 62, 10, 32, 32, 32, 32, 60, 116, 100, 62, 84, 101, 115, 116, 50, 60, 47, 116, 100, 62, 10, 32, 32, 32, 32, 60, 116, 100, 62, 84, 101, 115, 116, 50, 60, 47, 116, 100, 62, 10, 32, 32, 32, 32, 60, 116, 100, 62, 60, 99, 111, 100, 101, 62, 111, 116, 112, 97, 117, 116, 104, 58, 47, 47, 104, 111, 116, 112, 47, 84, 101, 115, 116, 50, 37,'
          '51, 65, 84, 101, 115, 116, 50, 63, 115, 101, 99, 114, 101, 116, 61, 66, 66, 66, 66, 66, 66, 66, 66, 38, 105, 115, 115, 117, 101, 114, 61, 84, 101, 115, 116, 50, 38, 99, 111, 117, 110, 116, 101, 114, 61, 48, 60, 47, 99, 111, 100, 101, 62, 60, 47, 116, 100, 62, 10, 32, 32, 32, 32, 60, 116, 100, 62, 60, 105, 109, 103, 32, 115, 114, 99, 61, 34, 100, 97, 116, 97, 58, 105, 109, 97, 103, 101, 47, 112, 110, 103, 59, 98, 97, 115, 101, 54, 52, 44, 105,'
          '86, 66, 79, 82, 119, 48, 75, 71, 103, 111, 65, 65, 65, 65, 78, 83, 85, 104, 69, 85, 103, 65, 65, 65, 77, 81, 65, 65, 65, 68, 69, 65, 81, 65, 65, 65, 65, 68, 111, 51, 98, 80, 71, 65, 65, 65, 66, 118, 85, 108, 69, 81, 86, 82, 52, 110, 79, 50, 88, 87, 50, 52, 68, 81, 81, 103, 69, 117, 81, 72, 51, 118, 50, 88, 102, 103, 70, 68, 78, 98, 71, 120, 76, 121, 100, 56, 103, 53, 83, 78, 106, 120, 52, 56, 112, 83, 55, 115, 119, 84,'
          '85, 79, 105, 102, 108, 109, 75, 102, 47, 73, 51, 83, 69, 83, 107, 112, 72, 52, 116, 47, 112, 84, 104, 116, 43, 115, 107, 43, 53, 107, 90, 121, 115, 113, 53, 73, 84, 89, 50, 83, 80, 82, 43, 104, 102, 113, 76, 115, 104, 47, 101, 87, 67, 73, 100, 90, 52, 100, 52, 111, 116, 119, 107, 118, 102, 113, 57, 48, 53, 116, 55, 112, 69, 103, 108, 112, 53, 102, 99, 82, 51, 122, 109, 43, 104, 53, 120, 99, 79, 47, 114, 81, 122, 118, 51, 105, 74, 99, 47, 111,'
          '56, 88, 79, 54, 50, 99, 116, 88, 67, 77, 106, 106, 69, 81, 97, 82, 67, 104, 43, 116, 48, 70, 81, 117, 116, 103, 74, 55, 113, 79, 108, 114, 49, 100, 108, 51, 83, 82, 57, 90, 118, 49, 48, 100, 67, 76, 79, 99, 80, 106, 51, 67, 100, 99, 116, 82, 67, 56, 113, 114, 71, 112, 121, 101, 112, 43, 107, 110, 97, 104, 108, 51, 107, 85, 99, 116, 113, 101, 73, 68, 100, 73, 112, 76, 67, 52, 116, 89, 107, 119, 114, 80, 106, 100, 73, 79, 85, 82, 120, 72,'
          '50, 105, 108, 114, 54, 57, 72, 56, 86, 101, 74, 120, 108, 118, 108, 113, 120, 55, 70, 98, 66, 68, 98, 69, 73, 82, 102, 70, 75, 101, 88, 51, 122, 86, 51, 107, 49, 103, 88, 52, 118, 122, 107, 87, 68, 118, 68, 50, 105, 68, 67, 89, 90, 79, 57, 72, 66, 107, 113, 89, 52, 79, 77, 76, 43, 65, 84, 114, 113, 116, 119, 105, 104, 99, 73, 47, 107, 112, 119, 97, 70, 66, 80, 117, 67, 116, 69, 122, 121, 89, 82, 114, 120, 71, 70, 106, 117, 89, 112, 51,'
          '88, 83, 106, 113, 103, 88, 105, 111, 115, 76, 57, 69, 73, 110, 78, 102, 73, 102, 85, 101, 69, 80, 118, 89, 66, 98, 43, 69, 107, 118, 69, 48, 119, 80, 57, 110, 69, 109, 73, 98, 79, 89, 67, 56, 82, 90, 70, 106, 77, 110, 97, 77, 113, 73, 50, 121, 74, 115, 116, 89, 66, 81, 85, 49, 112, 80, 82, 113, 52, 81, 100, 55, 105, 72, 111, 115, 101, 84, 48, 53, 83, 70, 88, 121, 97, 69, 101, 117, 101, 83, 87, 47, 107, 120, 99, 100, 119, 110, 104, 87,'
          '88, 122, 101, 48, 104, 108, 83, 55, 104, 77, 71, 104, 110, 66, 76, 112, 52, 111, 82, 82, 53, 49, 74, 57, 83, 54, 104, 122, 52, 53, 65, 47, 71, 107, 71, 121, 103, 88, 105, 51, 106, 83, 122, 107, 72, 83, 75, 98, 73, 78, 52, 65, 67, 55, 76, 65, 113, 72, 77, 77, 76, 108, 65, 99, 115, 82, 73, 111, 122, 105, 57, 97, 89, 109, 69, 76, 87, 47, 71, 73, 97, 116, 47, 106, 57, 105, 43, 100, 83, 98, 57, 97, 98, 107, 114, 53, 74, 105, 115, 57,'
          '89, 55, 80, 53, 103, 89, 120, 53, 80, 119, 52, 119, 102, 75, 47, 76, 98, 86, 65, 80, 65, 84, 84, 66, 56, 102, 121, 103, 116, 108, 114, 103, 47, 121, 56, 47, 115, 109, 102, 73, 70, 57, 110, 49, 118, 57, 117, 48, 80, 48, 100, 72, 119, 65, 65, 65, 65, 66, 74, 82, 85, 53, 69, 114, 107, 74, 103, 103, 103, 61, 61, 34, 62, 60, 47, 116, 100, 62, 10, 60, 47, 116, 114, 62, 10, 32, 32, 32, 32, 32, 32, 32, 32, 60, 47, 116, 97, 98, 108, 101,'
          '62, 10, 32, 32, 32, 32, 10, 32, 32, 32, 32, 60, 47, 98, 111, 100, 121, 62, 10, 60, 47, 104, 116, 109, 108, 62]';
      final byteData = Uint8List.fromList((jsonDecode(htmlFileByteString) as List).cast<int>().toList());

      final file = XFile.fromData(byteData, name: 'auth_pro_plain.html');

      group('fileIsValid', () {
        test('isTrue', () async {
          // Act
          final fileIsValid = await processor.fileIsValid(file);
          // Assert
          expect(fileIsValid, isTrue);
        });
        test('isFalse', () async {
          // Arrange
          final byteData = Uint8List.fromList((jsonDecode(htmlFileByteString) as List).cast<int>().toList()..removeAt(0));

          final file = XFile.fromData(byteData, name: 'auth_pro_plain_invalid.html');
          // Act
          final fileIsValid = await processor.fileIsValid(file);
          // Assert
          expect(fileIsValid, isFalse);
        });
      });

      test('fileNeedsPassword', () async {
        // Act
        final result = await processor.fileNeedsPassword(file);
        // Assert
        expect(result, false);
      });

      test('processFile', () async {
        // Act
        final results = await processor.processFile(file);
        // Assert
        _assertSuccessResults(results);
      });
    });
    group('otpauth link list plain', () {
      const uriListBytes =
          '[111, 116, 112, 97, 117, 116, 104, 58, 47, 47, 116, 111, 116, 112, 47, 84, 101, 115, 116, 49, 37, 51, 65, 84, 101, 115, 116, 49, 63, 115, 101, 99, 114, 101, 116, 61, 65, 65, 65, 65, 65, 65, 65, 65, 38, 105, 115, 115, 117, 101, 114, 61, 84, 101, 115, 116, 49, 10, 111, 116, 112, 97, 117, 116, 104, 58, 47, 47, 104, 111, 116, 112, 47, 84, 101, 115, 116, 50, 37, 51, 65, 84, 101, 115, 116, 50, 63, 115, 101, 99, 114, 101, 116, 61, 66, 66, 66, 66, 66, 66,'
          '66, 66, 38, 105, 115, 115, 117, 101, 114, 61, 84, 101, 115, 116, 50, 38, 99, 111, 117, 110, 116, 101, 114, 61, 48, 10]';
      final byteData = Uint8List.fromList((jsonDecode(uriListBytes) as List).cast<int>().toList());

      final file = XFile.fromData(byteData, name: 'auth_pro_plain.txt');

      group('fileIsValid', () {
        test('isTrue', () async {
          // Act
          final fileIsValid = await processor.fileIsValid(file);
          // Assert
          expect(fileIsValid, isTrue);
        });
        test('isFalse', () async {
          // Act
          final byteData = Uint8List.fromList((jsonDecode(uriListBytes) as List).cast<int>().toList()..removeWhere((uint) => uint == 58)); // 58 is ':'

          final file = XFile.fromData(byteData, name: 'auth_pro_plain_invalid.txt');
          final fileIsValid = await processor.fileIsValid(file);
          // Assert
          expect(fileIsValid, isFalse);
        });
      });

      test('fileNeedsPassword', () async {
        // Act
        final result = await processor.fileNeedsPassword(file);
        // Assert
        expect(result, isFalse);
      });
      test('processFile', () async {
        // Act
        final results = await processor.processFile(file);
        // Assert
        _assertSuccessResults(results);
      });
    });
  });
}
